*asciidoc.txt*	Filetype plugin for editing AsciiDoc

		  __   ____   ___  __  __  ____   __    ___
		 / _\ / ___) / __)(  )(  )(    \ /  \  / __)
		/    \\___ \( (__  )(  )(  ) D ((  O )( (__
		\_/\_/(____/ \___)(__)(__)(____/ \__/  \___)

AsciiDoc filetype plugin, making my life easier working with AsciiDoc in Vim.
I need a better name for this plugin. Like with most things, you can't reason
about them well until you give them names.
Let's experiment below, and see if a name sticks.

|1.|	Folding
|2.|	Compiling
|3.|	Navigating
|3.1|	Preview
|3.2|	Follow link
|3.3|	Sections
|4.|	Editing
|4.1|	Formatting
|4.2|	Macros
|4.3|	Blocks
|4.4|	Admonitions
|4.5|	Tables
|4.6|	Other
|5.|	Commands
|6.|	Options
|7.|	Disable defaults


==============================================================================
*1.* Folding						*adoc-folding*

VimsciDoc provides folding facilities with a simple fold expression function.
It folds ATX-style section titles. If syntax is off or an unreasonable syntax
file is used, the fold expression may be too eager. It will not fold example
blocks, which is the case for the few fold expressions I've seen floating
about. It will, however, fold section titles within literal and listing
blocks. If syntax is on and a reasonable syntax file is used, the fold
expression will verify that the line that looks like a title is also interpreted
as a title by the syntax file, and avoid these mistakes.

The following happens in `ftplugin/asciidoc.vim` with regards to folding.
>
    setlocal foldexpr=asciidoc#folding#foldexpr(v:lnum)
    setlocal foldmethod=expr
    setlocal foldlevel=1
<
If the folding does not work as expected, consider uncommenting the following
lines to provide some simple local mappings for debugging.
>
    " nnoremap <buffer> ,fe :echo asciidoc#folding#foldexpr(line('.'))<CR>
    " nnoremap <buffer> ,fl :echo foldlevel('.')<CR>
    " nnoremap <buffer> ,fm :echo match(getline('.'), '=')<CR>
<
==============================================================================
*2.* Compiling						*adoc-compiling*

AsciiVimDoc has some very simple and parochial compiler plugin features. It
assumes that the user wants to use the Asciidoctor processor, and that
Asciidoctor is on system path. It is possible to set a limited number of options
for the processor by setting buffer local variables. |buffer-variable|

Available buffer local variables~

	b:adoc_out_dir			root directory of output
	b:adoc_styles_dir		directory for stylesheets
	b:adoc_stylesheet		stylesheet file

To facilitate a fast cycle of editing and reviewing, a quick iteration mode is
available, doing "compile on save". Toggle this facility on and off with
`:AdocToggleQuickIter`. Default binding is `<LocalLeader>qi`.

==============================================================================
*3.* Navigating						*adoc-navigating*

AdocVim provides means of navigation. First, to preview the file edited in the
current buffer. Second, to follow links such as cross references within the
current file or within other AsciiDoc files, links to websites, images and
more; finally, navigation within the current document structure.


*3.1* Preview {parochial}
-----------

By setting the variable `g:asciidoc_preview_app` to an application able to
render AsciiDoc on the fly, the normal mode {<LocalLeader>of} map can be used
to open the current file in the external application.

    " Preview asciidoc file with `g:asciidoc_preview_app` application
    nnoremap <buffer> <localleader>of :execute "!open file://" . shellescape(expand('%:p')) . " -a " . g:asciidoc_preview_app<CR>


*3.2* Follow link
---------------

The 'include' options is set to `^include::`. This allows for using Vim's
built-in |include-search| facilities, including |[i|, |]CTRL-I| etc.

    " Follow link under cursor
    nnoremap <buffer> <LocalLeader>gf :AdocFollowLinkUnderCursor edit<CR>
    nnoremap <buffer> <LocalLeader><C-W>f :AdocFollowLinkUnderCursor split<CR>
    nnoremap <buffer> <LocalLeader><C-W><C-F> :AdocFollowLinkUnderCursor vsplit<CR>
    nnoremap <buffer> <LocalLeader><C-W>gf :AdocFollowLinkUnderCursor tabedit<CR>


*3.3* Sections
------------

Move forward to beginning of section with |]]| and backward with |[[|.
Move forward to end of section with |][| and backward with |[]|.

==============================================================================
*4.* Editing						*adoc-editing*

*4.1* Formatting					*adoc-formatting*
--------------


    " strong
    vnoremap <buffer> <localleader>ts <Esc>:AdocFormatText *<CR>
    nnoremap <buffer> <localleader>ts viw<Esc>:AdocFormatText *<CR>

    " emphasis
    vnoremap <buffer> <localleader>te <Esc>:AdocFormatText _<CR>
    nnoremap <buffer> <localleader>te viw<Esc>:AdocFormatText _<CR>

    " code
    vnoremap <buffer> <localleader>tc <Esc>:AdocFormatText `<CR>
    nnoremap <buffer> <localleader>tc viw<Esc>:AdocFormatText `<CR>

    " superscript
    vnoremap <buffer> <localleader>tk <Esc>:AdocFormatText ^<CR>
    nnoremap <buffer> <localleader>tk viw<Esc>:AdocFormatText ^<CR>

    " subscript
    vnoremap <buffer> <localleader>tj <Esc>:AdocFormatText ~<CR>
    nnoremap <buffer> <localleader>tj viw<Esc>:AdocFormatText ~<CR>

    " passthrough
    vnoremap <buffer> <localleader>tp <Esc>:AdocFormatText +<CR>
    nnoremap <buffer> <localleader>tp viw<Esc>:AdocFormatText +<CR>

    " End.Symmetric }}}

    " Asymmetric ...........................................          {{{

    " line through
    vnoremap <buffer> <localleader>t- <Esc>`>a#<Esc>`<i[line-through]#<Esc>
    nnoremap <buffer> <localleader>t- viw<Esc>`>a#<Esc>`<i[line-through]#<Esc>

    " attribute
    vnoremap <buffer> <localleader>ta <Esc>`>a#<Esc>`<i[]#<Esc>hi
    nnoremap <buffer> <localleader>ta viw<Esc>`>a#<Esc>`<i[]#<Esc>hi

    " End.Asymmetric }}}

*4.2* Macros						*adoc-macros*
----------

    " Image ....................................................          {{{
    inoremap <buffer> <localleader>img image:[]<Left>
    nnoremap <buffer> <localleader>img :AdocInsertMacroVisualTarget n inline image<CR>
    vnoremap <buffer> <localleader>img :<C-U>AdocInsertMacroVisualTarget v inline image<CR>
    " }}}

    " Asciidoctor experimental .................................          {{{
    " kbd
    inoremap <buffer> <localleader>kbd kbd:[]<Left>
    nnoremap <buffer> <localleader>kbd :AdocInsertMacroVisualAttribs n inline kbd<CR>
    vnoremap <buffer> <localleader>kbd :<C-U>AdocInsertMacroVisualAttribs v inline kbd<CR>

    " menu
    inoremap <buffer> <localleader>menu menu:[]<Left>
    nnoremap <buffer> <localleader>menu :AdocInsertMacroVisualAttribs n inline menu<CR>
    vnoremap <buffer> <localleader>menu :<C-U>AdocInsertMacroVisualAttribs v inline menu<CR>

    " button
    inoremap <buffer> <localleader>btn btn:[]<Left>
    nnoremap <buffer> <localleader>btn :AdocInsertMacroVisualAttribs n inline btn<CR>
    vnoremap <buffer> <localleader>btn :<C-U>AdocInsertMacroVisualAttribs v inline btn<CR>
    " End.Asciidoctor experimental }}}

    " Include ...........................................          {{{
    nnoremap <buffer> <LocalLeader>inc :AdocInsertMacroVisualTarget n block include<CR>
    vnoremap <buffer> <LocalLeader>inc :<C-U>AdocInsertMacroVisualTarget v block include<CR>
    " End.Include}}}

*4.3* Blocks						*adoc-blocks*
----------

    " code block
    inoremap <buffer> <localleader>code <Esc>:AdocInsertParagraph i ---- source<CR>
    nnoremap <buffer> <localleader>code :AdocInsertParagraph n ---- source<CR>
    vnoremap <buffer> <localleader>code :<C-U>AdocInsertParagraph v ---- source<CR>

    " comment block
    inoremap <buffer> <localleader>comment <Esc>:AdocInsertParagraph i //// <CR>
    nnoremap <buffer> <localleader>comment :AdocInsertParagraph n //// <CR>
    vnoremap <buffer> <localleader>comment :<C-U>AdocInsertParagraph v //// <CR>

    " example block
    inoremap <buffer> <localleader>example <Esc>:AdocInsertParagraph i ====<CR>
    nnoremap <buffer> <localleader>example :AdocInsertParagraph n ====<CR>
    vnoremap <buffer> <localleader>example :<C-U>AdocInsertParagraph v ====<CR>

    " literal block
    inoremap <buffer> <localleader>literal <Esc>:AdocInsertParagraph i ....<CR>
    nnoremap <buffer> <localleader>literal :AdocInsertParagraph n ....<CR>
    vnoremap <buffer> <localleader>literal :<C-U>AdocInsertParagraph v ....<CR>

    " open block
    inoremap <buffer> <localleader>open <Esc>:AdocInsertParagraph i --<CR>
    nnoremap <buffer> <localleader>open :AdocInsertParagraph n --<CR>
    vnoremap <buffer> <localleader>open :<C-U>AdocInsertParagraph v --<CR>

    " passthrough block
    inoremap <buffer> <localleader>passthrough <Esc>:AdocInsertParagraph i ++++<CR>
    nnoremap <buffer> <localleader>passthrough :AdocInsertParagraph n ++++<CR>
    vnoremap <buffer> <localleader>passthrough :<C-U>AdocInsertParagraph v ++++<CR>

    " quote block
    inoremap <buffer> <localleader>quote <Esc>:AdocInsertParagraph i ____ quote author source<CR>
    nnoremap <buffer> <localleader>quote :AdocInsertParagraph n ____ quote author source<CR>
    vnoremap <buffer> <localleader>quote :<C-U>AdocInsertParagraph v ____ quote author source<CR>

    " sidebar block
    inoremap <buffer> <localleader>sidebar <Esc>:AdocInsertParagraph i ****<CR>
    nnoremap <buffer> <localleader>sidebar :AdocInsertParagraph n ****<CR>
    vnoremap <buffer> <localleader>sidebar :<C-U>AdocInsertParagraph v ****<CR>

    " verse block
    inoremap <buffer> <localleader>verse <Esc>:AdocInsertParagraph i ____ verse author source<CR>
    nnoremap <buffer> <localleader>verse :AdocInsertParagraph n ____ verse author source<CR>
    vnoremap <buffer> <localleader>verse :<C-U>AdocInsertParagraph v ____ verse author source<CR>

*4.4* Admonitions						*adoc-admonition*
---------------

    " caution
    inoremap <buffer> <localleader>caution <Esc>:AdocInsertParagraph i -- CAUTION<CR>
    nnoremap <buffer> <localleader>caution :AdocInsertParagraph n -- CAUTION<CR>
    vnoremap <buffer> <localleader>caution :<C-U>AdocInsertParagraph v -- CAUTION<CR>

    " important
    inoremap <buffer> <localleader>important <Esc>:AdocInsertParagraph i -- IMPORTANT<CR>
    nnoremap <buffer> <localleader>important :AdocInsertParagraph n -- IMPORTANT<CR>
    vnoremap <buffer> <localleader>important :<C-U>AdocInsertParagraph v -- IMPORTANT<CR>

    " note
    inoremap <buffer> <localleader>note <Esc>:AdocInsertParagraph i -- NOTE<CR>
    nnoremap <buffer> <localleader>note :AdocInsertParagraph n -- NOTE<CR>
    vnoremap <buffer> <localleader>note :<C-U>AdocInsertParagraph v -- NOTE<CR>

    " tip
    inoremap <buffer> <localleader>tip <Esc>:AdocInsertParagraph i -- TIP<CR>
    nnoremap <buffer> <localleader>tip :AdocInsertParagraph n -- TIP<CR>
    vnoremap <buffer> <localleader>tip :<C-U>AdocInsertParagraph v -- TIP<CR>

    " warning
    inoremap <buffer> <localleader>warning <Esc>:AdocInsertParagraph i -- WARNING<CR>
    nnoremap <buffer> <localleader>warning :AdocInsertParagraph n -- WARNING<CR>
    vnoremap <buffer> <localleader>warning :<C-U>AdocInsertParagraph v -- WARNING<CR>

    " TODO: other blocks, like abstract, graphviz, latex, music, partintro


*4.5* Tables						*adoc-tables*
----------

    inoremap <buffer> <localleader>table <Esc>:AdocInsertTable i<CR>
    nnoremap <buffer> <localleader>table :AdocInsertTable n<CR>
    vnoremap <buffer> <localleader>table :<C-U>AdocInsertTable v<CR>
    " Table text objects
    vnoremap <buffer> <silent> <LocalLeader>it :<C-U>call asciidoc#table#text_object(1, 1)<CR>
    onoremap <buffer> <silent> <LocalLeader>it :<C-U>call asciidoc#table#text_object(1, 0)<CR>
    vnoremap <buffer> <silent> <LocalLeader>at :<C-U>call asciidoc#table#text_object(0, 1)<CR>
    onoremap <buffer> <silent> <LocalLeader>at :<C-U>call asciidoc#table#text_object(0, 0)<CR>
    " Table attributes
    nnoremap <buffer> <LocalLeader>cols :call asciidoc#table#insert_attributes('cols')<CR>
    nnoremap <buffer> <LocalLeader>opts :call asciidoc#table#insert_attributes('options')<CR>
    " End.Table }}}


*4.6* Other						*adoc-other*
---------

    " Create xref ..........................................          {{{
    vnoremap <buffer> <LocalLeader>xr :<C-U>AdocInsertXref v<CR>
    nnoremap <buffer> <LocalLeader>xr :AdocInsertXref n<CR>
    " End.Create xref }}}

    " One sentence per line ................................          {{{
    nnoremap <buffer> <localleader>spl :AdocSentencePerLine n<CR>
    vnoremap <buffer> <localleader>spl :<C-U>AdocSentencePerLine v<CR>
    " End.One sentence per line }}}

Toggle title						*adoc-toggle-title*
It is recommended to use the ATX style for titles rather than the Setex style.
Both are valid AsciiDoc, however, and whether one chooses to go against
recommendation, or is working with source created by others, it can be useful
to toggle between the two styles.  Typing kbd:[+,tt+] will toggle the title of
the current section between the two styles.


==============================================================================
*5.* Commands						*adoc-commands*

command! -buffer AdocToggleQuickIter call asciidoc#compiler#quick_iter()
command! -buffer -nargs=1 AdocSentencePerLine call asciidoc#base#sentence_per_line(<f-args>)
command! -buffer -nargs=+ AdocInsertParagraph call asciidoc#base#insert_paragraph(<f-args>)
command! -buffer -nargs=1 AdocFormatText call asciidoc#editing#format_text(<f-args>)
command! -buffer -nargs=+ AdocInsertMacroVisualTarget call asciidoc#base#insert_macro_target(<f-args>)
command! -buffer -nargs=+ AdocInsertMacroVisualAttribs call asciidoc#base#insert_macro_attribs(<f-args>)
command! -buffer -nargs=? AdocFollowLinkUnderCursor call asciidoc#base#follow_cursor_link(<f-args>)
command! -buffer -nargs=1 AdocInsertXref call asciidoc#base#create_xref(<f-args>)
command! -buffer -nargs=1 AdocInsertTable call asciidoc#base#insert_table(<f-args>)

==============================================================================
*6.* Options						*adoc-options*

    setlocal commentstring=//\ %s
    setlocal comments=fl:////,://,fn:*,fn:.
    setlocal formatoptions=tcqjnro
    let &formatlistpat="^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*"
    setlocal spell
    setlocal spelllang=en
    setlocal include=^include::

==============================================================================
*7.* Disable defaults					*adoc-disable*

To disable the default mappings, set `g:asciidoc_use_defaults` to an empty
list before the plugin is loaded. To disable some components, list them.

    let g:asciidoc_use_defaults = []

 vim:tw=78:ts=8:sw=8:noet:ft=help:norl:
